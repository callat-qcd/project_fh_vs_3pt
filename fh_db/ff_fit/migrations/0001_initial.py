# Generated by Django 3.0.6 on 2020-11-26 05:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FF_fit',
            fields=[
                ('id', models.AutoField(help_text='Primary key for Base class.', primary_key=True, serialize=False)),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date the class was last modified')),
                ('tag', models.CharField(blank=True, help_text='User defined tag for easy searches', max_length=200, null=True)),
                ('data_file_name', models.TextField(help_text='Store the name of data file')),
                ('include_2pt', models.BooleanField(help_text='Whether include 2pt part in fitting', null=True)),
                ('include_3pt', models.BooleanField(help_text='Whether include 3pt part in fitting')),
                ('include_sum', models.BooleanField(help_text='Whether include sum part in fitting')),
                ('chained', models.BooleanField(help_text='Whether use chained fit')),
                ('data_and_results', models.TextField(help_text='Use gv.dump to package data, prama, chi2 and dof, and turn into hexcode')),
                ('prior_hexcode', models.TextField(help_text='put all priors into a string with fixed order and turn it into hexcode')),
                ('pt2_nstates', models.PositiveSmallIntegerField(help_text='Number of states in 2pt fit')),
                ('pt2_tmin', models.PositiveSmallIntegerField(help_text='Minimum of t in 2pt fit')),
                ('pt2_tmax', models.PositiveSmallIntegerField(help_text='Maximum of t in 2pt fit')),
                ('pt3_nstates', models.PositiveSmallIntegerField(help_text='Number of states in 3pt fit')),
                ('pt3_A3_tsep_min', models.PositiveSmallIntegerField(help_text='Minimum of tsep in 3pt fit')),
                ('pt3_A3_tsep_max', models.PositiveSmallIntegerField(help_text='Maximum of tsep in 3pt fit')),
                ('pt3_V4_tsep_min', models.PositiveSmallIntegerField(help_text='Minimum of tsep in 3pt fit')),
                ('pt3_V4_tsep_max', models.PositiveSmallIntegerField(help_text='Maximum of tsep in 3pt fit')),
                ('pt3_tau_dict', models.TextField(help_text='Use gv.dump to package tau dict of 3pt, and turn into hexcode')),
                ('sum_nstates', models.PositiveSmallIntegerField(help_text='Number of states in sum tau fit')),
                ('sum_A3_tsep_min', models.PositiveSmallIntegerField(help_text='Minimum of tsep in sum tau fit')),
                ('sum_A3_tsep_max', models.PositiveSmallIntegerField(help_text='Maximum of tsep in sum tau fit')),
                ('sum_V4_tsep_min', models.PositiveSmallIntegerField(help_text='Minimum of tsep in sum tau fit')),
                ('sum_V4_tsep_max', models.PositiveSmallIntegerField(help_text='Maximum of tsep in sum tau fit')),
                ('sum_tau_cut', models.PositiveSmallIntegerField(help_text='Start of sum in sum tau fit')),
                ('E0', models.FloatField(help_text='fit result of E0')),
                ('E0_err', models.FloatField(help_text='fit result of E0 err')),
                ('z0', models.FloatField(help_text='fit result of z0')),
                ('z0_err', models.FloatField(help_text='fit result of z0 err')),
                ('z0_ps', models.FloatField(help_text='fit result of z0', null=True)),
                ('z0_ps_err', models.FloatField(help_text='fit result of z0 err', null=True)),
                ('A300', models.FloatField(help_text='fit result of A300')),
                ('A300_err', models.FloatField(help_text='fit result of A300 err')),
                ('V400', models.FloatField(help_text='fit result of V400')),
                ('V400_err', models.FloatField(help_text='fit result of V400 err')),
                ('Q_value', models.FloatField(help_text='Q value of fitting')),
                ('log_GBF', models.FloatField(help_text='logGBF of fitting')),
                ('A3_over_V4', models.FloatField(help_text='fit result of A300/V400')),
                ('A3_over_V4_err', models.FloatField(help_text='fit result of A300/V400 err')),
                ('id_num', models.PositiveSmallIntegerField(help_text='used to divide and select')),
                ('user', models.ForeignKey(blank=True, help_text='User who updated this object. Set on save by connection to database. Anonymous if not found.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='ff_fit',
            constraint=models.UniqueConstraint(fields=('data_file_name', 'include_2pt', 'include_3pt', 'include_sum', 'chained', 'data_and_results', 'prior_hexcode', 'pt2_nstates', 'pt2_tmin', 'pt2_tmax', 'pt3_nstates', 'pt3_A3_tsep_min', 'pt3_A3_tsep_max', 'pt3_V4_tsep_min', 'pt3_V4_tsep_max', 'pt3_tau_dict', 'sum_nstates', 'sum_A3_tsep_min', 'sum_A3_tsep_max', 'sum_V4_tsep_min', 'sum_V4_tsep_max', 'sum_tau_cut', 'id_num'), name='unique_fit'),
        ),
    ]
