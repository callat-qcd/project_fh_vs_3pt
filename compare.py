import seqfhfit as seq
import numpy as np
import gvar as gv

# 7 states for 2pt and 3pt, 4 states for sum and fh,
# t = [4, 10] for all
X = np.arange(4, 11)

# results from jin chen's code
# for 3pt this is the time ordering:
# 'pt3_A3': tsep: [array([ 4,  4,  5,  5,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 9, 10, 10, 10, 10, 10]),
#           tau: array([1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5])]
result = {'pt2': np.array(
    [4.68440257e-08, 2.29203824e-08, 1.14692352e-08, 5.81066551e-09, 2.96513323e-09, 1.51975678e-09, 7.81146394e-10]),
    'pt3_A3': np.array(
        [5.83510860e-08, 5.28737617e-08, 2.89829869e-08, 2.60435153e-08, 1.46751859e-08, 1.32056589e-08, 1.30813079e-08,
         7.50191550e-09, 6.76977488e-09, 6.70768143e-09, 3.85431159e-09, 3.48707511e-09, 3.46166678e-09, 3.46167078e-09,
         1.98583328e-09, 1.80019141e-09, 1.79043923e-09, 1.79341886e-09, 1.02486321e-09, 9.30410326e-10,
         9.26743015e-10, 9.29848275e-10, 9.31333486e-10]),
    'pt3_V4': np.array(
        [5.29564757e-08, 4.93608640e-08, 2.58553820e-08, 2.38479022e-08, 1.29270650e-08, 1.18849768e-08, 1.17635678e-08,
         6.54612196e-09, 6.01308962e-09, 5.93287695e-09, 3.33951012e-09, 3.06709078e-09, 3.02352814e-09, 3.01384490e-09,
         1.71149653e-09, 1.57189082e-09, 1.54937260e-09, 1.54295815e-09, 8.79770741e-10, 8.08027035e-10, 7.96521788e-10,
         7.93084149e-10, 7.92312131e-10]),
    'sum_A3': np.array([1.18152274, 1.20086361, 1.21856211, 1.23320389, 1.24460232, 1.253172, 1.25946622]),
    'sum_V4': np.array([1.02233993, 1.01533165, 1.0124868, 1.01223753, 1.01335803, 1.015125, 1.01713493]),
    'fh_ss_A3': np.array([1.24073934, 1.24421737, 1.24644634, 1.25006912, 1.25441161, 1.25868199, 1.26243117]),
    'fh_ss_V4': np.array([1.02546012, 1.02052534, 1.01947221, 1.01989019, 1.02088149, 1.02210112, 1.02339246])}

init = {"nt": 50, "strategy": "does not matter"}
ff = seq.FitFunction(init)

# for 2pt and 3pt
p = {'e0': 0.6569980804940724, 'log(e1)': -1.792564634258468, 'z0': 0.0007322962713868005,
     'z1': 0.00031926739717361017, 'z0_ps': 0.0027599222530298494, 'z1_ps': 0.001431118291443409,
     'log(e2)': -0.9846627109463076, 'z2': 0.0005867499848729451, 'z2_ps': 0.004925016671044892,
     'log(e3)': -1.4332632399792562, 'z3': 0.0005857677045486223, 'z3_ps': 0.0037432859631687295,
     'log(e4)': -0.8783809400028859, 'z4': 0.0007358919366326853, 'z4_ps': 0.004101609401597982,
     'log(e5)': -0.5990846646742792, 'z5': 0.000720978274317894, 'z5_ps': 0.0024758013934849713,
     'log(e6)': 0.22087872995574187, 'z6': 0.001068604493126451, 'z6_ps': 0.001527476248556211,
     'a00': 1.2605222674624277, 'v00': 1.0346195768031434, 'a10': -0.019928993129824796,
     'v10': -0.08257541644796097, 'a11': 0.29198433865929807, 'v11': 1.051135817419092,
     'a20': -0.4390643954197441, 'v20': 0.12174272715962244, 'a21': 0.3620476349078552,
     'v21': 0.18337103533373755, 'a22': 0.6361286847206984, 'v22': 0.9421169783186929,
     'a30': 0.3437553213608964, 'v30': -0.29053127347588015, 'a31': 0.014756209659544987,
     'v31': -0.08191836353830108, 'a32': 0.42514011342798597, 'v32': -0.25852654276213743,
     'a33': 0.07616910218143222, 'v33': 0.9768394026150308, 'a40': 0.32285904854798964,
     'v40': 0.6600701077522717, 'a41': -0.20601569608462308, 'v41': 0.1202149006693726,
     'a42': 0.13573386251125, 'v42': 0.9759940383034051, 'a43': -0.008233363922818721,
     'v43': -0.5895339988634838, 'a44': -0.08441553733931158, 'v44': 1.0169700028970383,
     'a50': -0.28957424402671855, 'v50': -0.6859614174750209, 'a51': 0.007091833314974759,
     'v51': -0.48255409803002397, 'a52': 0.24375784517726248, 'v52': -0.17342902031225207,
     'a53': 0.3622536648259678, 'v53': -0.8199613170806525, 'a54': 0.288391568547287,
     'v54': 0.6535031839051664, 'a55': 0.13881007876106274, 'v55': 1.0116094504754012,
     'a60': 1.5571138917101188, 'v60': 1.26480361606303, 'a61': 0.6498508782846277,
     'v61': 0.6630205376710112, 'a62': 0.3760553976868176, 'v62': 0.7303543467646251,
     'a63': 0.468175298300074, 'v63': 0.22351478241546768, 'a64': 0.43636684770469747,
     'v64': 0.7836973303204963, 'a65': 0.19899877566236415, 'v65': 0.3843114716600552,
     'a66': 0.014721329022930874, 'v66': 0.9997916966669208}
p = gv.BufferDict(p)

ff.strategy = dict()
ff.strategy["nstates"] = 7

# check 2pt
twopt = ff.twopoint(X, p)
diff_twopt = (result["pt2"] - twopt) / result["pt2"]
print("two point relative difference")
print(diff_twopt)

# check 3pt
# the ceiling function cuts the data in half, which assumes the data is folded vs. tau
from math import ceil

a3 = []
v4 = []
for Xi in X:
    t = np.arange(1, Xi)
    ff.corr = [False, "a", Xi]
    r = ff.threepoint(t, p)
    a3.extend(r[:ceil(len(r) / 2)])
    ff.corr = [False, "v", Xi]
    r = ff.threepoint(t, p)
    v4.extend(r[:ceil(len(r) / 2)])
print("three point relative different")
print("A3")
print((result["pt3_A3"] - a3) / result["pt3_A3"])
print("V4")
print((result["pt3_V4"] - v4) / result["pt3_V4"])

# for sum and fh
# take log(e_fh) -> log(e3) and z_fh_ss -> z3
# fh_a0,1,2,3 -> a30, a31, a32, a33
# fh_v0,1,2,3 -> v30, v31, v32, v33
# dn_ss_A3 -> cn
# dn_ss_V4 -> dn
p = {'e0': 0.6569980804940724, 'log(e1)': -1.792564634258468, 'z0': 0.0007322962713868005, 'z1': 0.00031926739717361017,
     'log(e2)': -0.9846627109463076, 'z2': 0.0005867499848729451, 'log(e3)': -1.3401326343142292,
     'z3': 0.0005814368336925574, 'a00': 1.2605222674624277, 'v00': 1.0346195768031434, 'a10': -0.019928993129824796,
     'v10': -0.08257541644796097, 'a11': 0.29198433865929807, 'v11': 1.051135817419092, 'a20': -0.4390643954197441,
     'v20': 0.12174272715962244, 'a21': 0.3620476349078552, 'v21': 0.18337103533373755, 'a22': 0.6361286847206984,
     'v22': 0.9421169783186929, 'a30': 0.40717916505397117, 'a31': -0.11848922973337116, 'a32': 0.4755531742817521,
     'a33': 0.3185507257701398, 'v30': -0.19889392471309314, 'v31': -0.16239682809754896, 'v32': 0.07142936237562103,
     'v33': 1.0119119986917378, 'c0': -1.9243967556607513e-06, 'd0': 9.80245575951399e-07, 'c1': -3.465305272746157e-07,
     'd1': 5.2700381388778125e-08, 'c2': -2.4388111312808906e-06, 'd2': 7.455135470502138e-07,
     'c3': -1.271504548850396e-06, 'd3': 9.71618272295938e-07}
p = gv.BufferDict(p)

# check sum
ff.strategy["nstates"] = 4
ff.strategy["fstates"] = 4
ff.corr = [False, "sma"]
smA = ff.fh(X, p, "sm")
ff.corr = [False, "smv"]
smV = ff.fh(X, p, "sm")

print("sum relative diff")
print("A3")
print((result["sum_A3"] - smA) / result["sum_A3"])
print("V4")
print((result["sum_V4"] - smV) / result["sum_V4"])

# check fh
ff.corr = [False, "fha"]
fhA = ff.fh(X, p, "fh")
ff.corr = [False, "fhv"]
fhV = ff.fh(X, p, "fh")

print("fh relative diff")
print("A3")
print((result["fh_ss_A3"] - fhA) / result["fh_ss_A3"])
print("V4")
print((result["fh_ss_V4"] - fhV) / result["fh_ss_V4"])
